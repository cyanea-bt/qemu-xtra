diff -ru ../dosbox-code-0/configure.ac ./configure.ac
--- ../dosbox-code-0/configure.ac	2022-05-04 22:19:48.160904500 -0700
+++ configure.ac	2022-05-04 16:46:17.907575400 -0700
@@ -616,7 +616,7 @@
 dnl Some target detection and actions for them
 case "$host" in
     *-*-cygwin* | *-*-mingw32*)
-       LIBS="$LIBS -lwinmm"
+       LIBS="$LIBS -lwinmm -lshlwapi"
        AC_DEFINE(C_DIRECTSERIAL, 1, [ Define to 1 if you want serial passthrough support (Win32, Posix and OS/2 only).])
        if test x$have_sdl_net_lib = xyes -a x$have_sdl_net_h = xyes ; then
          LIBS="$LIBS -lws2_32"
diff -ru ../dosbox-code-0/include/Makefile.am ./include/Makefile.am
--- ../dosbox-code-0/include/Makefile.am	2022-05-04 22:19:48.535864300 -0700
+++ include/Makefile.am	2022-05-04 16:46:17.908070400 -0700
@@ -36,5 +36,6 @@
 support.h \
 timer.h \
 vga.h \
+voodoo.h \
 video.h
 
diff -ru ../dosbox-code-0/include/logging.h ./include/logging.h
--- ../dosbox-code-0/include/logging.h	2022-05-04 22:19:46.863149300 -0700
+++ include/logging.h	2022-05-04 16:46:17.924026300 -0700
@@ -28,6 +28,7 @@
 	LOG_MOUSE,LOG_BIOS,LOG_GUI,LOG_MISC,
 	LOG_IO,
 	LOG_PCI,
+	LOG_VOODOO,
 	LOG_MAX
 };
 
diff -ru ../dosbox-code-0/include/mem.h ./include/mem.h
--- ../dosbox-code-0/include/mem.h	2022-05-04 22:19:47.394435000 -0700
+++ include/mem.h	2022-05-04 16:46:17.937515000 -0700
@@ -173,6 +173,8 @@
 
 void MEM_BlockWrite(PhysPt pt,void const * const data,Bitu size);
 void MEM_BlockRead(PhysPt pt,void * data,Bitu size);
+void MEM_BlockWrite32(PhysPt pt,void * data,Bitu size);
+void MEM_BlockRead32(PhysPt pt,void * data,Bitu size);
 void MEM_BlockCopy(PhysPt dest,PhysPt src,Bitu size);
 void MEM_StrCopy(PhysPt pt,char * data,Bitu size);
 
diff -ru ../dosbox-code-0/include/pci_bus.h ./include/pci_bus.h
--- ../dosbox-code-0/include/pci_bus.h	2022-05-04 22:19:48.520239600 -0700
+++ include/pci_bus.h	2022-05-04 16:46:17.963875300 -0700
@@ -19,7 +19,7 @@
 #ifndef DOSBOX_PCI_H
 #define DOSBOX_PCI_H
 
-//#define PCI_FUNCTIONALITY_ENABLED 0
+#define PCI_FUNCTIONALITY_ENABLED 1
 
 #if defined PCI_FUNCTIONALITY_ENABLED
 
@@ -83,4 +83,10 @@
 
 #endif
 
+void PCI_AddSVGAS3_Device(void);
+void PCI_RemoveSVGAS3_Device(void);
+
+void PCI_AddSST_Device(Bitu type);
+void PCI_RemoveSST_Device(void);
+
 #endif
diff -ru ../dosbox-code-0/include/video.h ./include/video.h
--- ../dosbox-code-0/include/video.h	2022-05-04 22:19:47.566289000 -0700
+++ include/video.h	2022-05-04 16:46:17.983570900 -0700
@@ -60,6 +60,8 @@
 Bitu GFX_GetRGB(Bit8u red,Bit8u green,Bit8u blue);
 Bitu GFX_SetSize(Bitu width,Bitu height,Bitu flags,double scalex,double scaley,GFX_CallBack_t cb);
 void GFX_SetShader(const char* src);
+void GFX_TearDown(void);
+Bitu GFX_ScaleWidth(float &r);
 
 void GFX_ResetScreen(void);
 void GFX_Start(void);
@@ -70,6 +72,14 @@
 void GFX_GetSize(int &width, int &height, bool &fullscreen);
 void GFX_LosingFocus(void);
 
+bool GFX_IsFullscreen(void);
+bool GFX_IsOpenGL(void);
+void GFX_SwitchLazyFullscreen(bool lazy);
+bool GFX_LazyFullscreenRequested(void);
+void GFX_SwitchFullscreenNoReset(void);
+void GFX_RestoreMode(void);
+void GFX_UpdateSDLCaptureState(void);
+
 #if defined (WIN32)
 bool GFX_SDLUsingWinDIB(void);
 #endif
diff -ru ../dosbox-code-0/src/cpu/paging.cpp ./src/cpu/paging.cpp
--- ../dosbox-code-0/src/cpu/paging.cpp	2022-05-04 22:19:45.657460600 -0700
+++ src/cpu/paging.cpp	2022-05-04 16:46:17.998825400 -0700
@@ -144,6 +144,8 @@
 	old_cpudecoder=cpudecoder;
 	cpudecoder=&PageFaultCore;
 	paging.cr2=lin_addr;
+	if (pf_queue.used > 0)
+	    LOG_MSG("PageFault at %X type [%x] queue %d",lin_addr,faultcode,pf_queue.used);
 	PF_Entry * entry=&pf_queue.entries[pf_queue.used++];
 	LOG(LOG_PAGING,LOG_NORMAL)("PageFault at %X type [%x] queue %d",lin_addr,faultcode,pf_queue.used);
 //	LOG_MSG("EAX:%04X ECX:%04X EDX:%04X EBX:%04X",reg_eax,reg_ecx,reg_edx,reg_ebx);
@@ -160,6 +162,8 @@
 #endif
 	DOSBOX_RunMachine();
 	pf_queue.used--;
+	if (pf_queue.used > 0)
+	    LOG_MSG("Left PageFault for %x queue %d",lin_addr,pf_queue.used);
 	LOG(LOG_PAGING,LOG_NORMAL)("Left PageFault for %x queue %d",lin_addr,pf_queue.used);
 	memcpy(&lflags,&old_lflags,sizeof(LazyFlags));
 	cpudecoder=old_cpudecoder;
diff -ru ../dosbox-code-0/src/debug/debug_gui.cpp ./src/debug/debug_gui.cpp
--- ../dosbox-code-0/src/debug/debug_gui.cpp	2022-05-04 22:19:43.858555300 -0700
+++ src/debug/debug_gui.cpp	2022-05-04 16:46:18.013446000 -0700
@@ -256,6 +256,8 @@
 	loggrp[LOG_IO].front="IO";
 	loggrp[LOG_PCI].front="PCI";
 	
+	loggrp[LOG_VOODOO].front="SST";
+	
 	/* Register the log section */
 	Section_prop * sect=control->AddSection_prop("log",LOG_Init);
 	Prop_string* Pstring = sect->Add_string("logfile",Property::Changeable::Always,"");
diff -ru ../dosbox-code-0/src/dosbox.cpp ./src/dosbox.cpp
--- ../dosbox-code-0/src/dosbox.cpp	2022-05-04 22:19:47.425747700 -0700
+++ src/dosbox.cpp	2022-05-04 21:17:10.579755700 -0700
@@ -76,11 +76,13 @@
 
 #if defined(PCI_FUNCTIONALITY_ENABLED)
 void PCI_Init(Section*);
+void VOODOO_Init(Section*);
 #endif
 
 
 void KEYBOARD_Init(Section*);	//TODO This should setup INT 16 too but ok ;)
 void JOYSTICK_Init(Section*);
+void GLIDE_Init(Section*);
 void MOUSE_Init(Section*);
 void SBLASTER_Init(Section*);
 void GUS_Init(Section*);
@@ -535,6 +537,40 @@
 
 #if defined(PCI_FUNCTIONALITY_ENABLED)
 	secprop=control->AddSection_prop("pci",&PCI_Init,false); //PCI bus
+
+	secprop->AddInitFunction(&VOODOO_Init,true);
+	const char* voodoo_settings[] = {
+		"false",
+		"software",
+#if C_OPENGL
+		"opengl",
+#endif
+		"auto",
+		0
+	};
+	Pstring = secprop->Add_string("voodoo",Property::Changeable::WhenIdle,"auto");
+	Pstring->Set_values(voodoo_settings);
+	Pstring->Set_help("Enable VOODOO support.");
+
+	const char* voodoo_memory[] = {
+		"standard",
+		"max",
+		0
+	};
+	Pstring = secprop->Add_string("voodoomem",Property::Changeable::OnlyAtStart,"standard");
+	Pstring->Set_values(voodoo_memory);
+	Pstring->Set_help("Specify VOODOO card memory size.\n"
+		              "  'standard'      4MB card (2MB front buffer + 1x2MB texture unit)\n"
+					  "  'max'           12MB card (4MB front buffer + 2x4MB texture units)");
+
+	Pint = secprop->Add_int("voodooscale",Property::Changeable::WhenIdle, 0);
+	Pint->Set_help("Specify VOODOO width in pixels to scale. Auto = 0 - default");
+	Pint = secprop->Add_int("voodoofps",Property::Changeable::WhenIdle, 0);
+	Pint->Set_help("Specify VOODOO FPS limit. No limit = 0 - default");
+	Pbool = secprop->Add_bool("voodoosrgb",Property::Changeable::WhenIdle, false);
+	Pbool->Set_help("Enable VOODOO framebuffer sRGB");
+	Pbool = secprop->Add_bool("voodoostat",Property::Changeable::WhenIdle, false);
+	Pbool->Set_help("Display on-screen VOODOO stat.");
 #endif
 
 
@@ -749,6 +783,17 @@
 	Pmulti_remain->Set_help("see serial1");
 
 
+	secprop=control->AddSection_prop("glide",&GLIDE_Init,true);
+	Pbool = secprop->Add_bool("glide",Property::Changeable::WhenIdle,false);
+	Pbool->Set_help("Enable glide emulation: true,false.");
+	//Phex = secprop->Add_hex("grport",Property::Changeable::WhenIdle,0x600);
+	//Phex->Set_help("I/O port to use for host communication.");
+	Pstring = secprop->Add_string("lfb",Property::Changeable::WhenIdle,"full_noaux");
+	Pstring->Set_help("LFB access: full,full_noaux,read,read_noaux,write,write_noaux,none.\n"
+		"OpenGlide does not support locking aux buffer, please use _noaux modes.");
+	Pbool = secprop->Add_bool("splash",Property::Changeable::WhenIdle,true);
+	Pbool->Set_help("Show 3dfx splash screen (requires 3dfxSpl2.dll).");
+
 	/* All the DOS Related stuff, which will eventually start up in the shell */
 	secprop=control->AddSection_prop("dos",&DOS_Init,false);//done
 	secprop->AddInitFunction(&XMS_Init,true);//done
diff -ru ../dosbox-code-0/src/gui/sdlmain.cpp ./src/gui/sdlmain.cpp
--- ../dosbox-code-0/src/gui/sdlmain.cpp	2022-05-04 22:19:48.270241300 -0700
+++ src/gui/sdlmain.cpp	2022-05-04 16:46:18.060428700 -0700
@@ -49,6 +49,7 @@
 #include "cpu.h"
 #include "cross.h"
 #include "control.h"
+#include "glidedef.h"
 #include "render.h"
 
 #define MAPPERFILE "mapper-" VERSION ".map"
@@ -305,6 +306,7 @@
 		int xsensitivity;
 		int ysensitivity;
 	} mouse;
+        int dpiscale;
 	SDL_Rect updateRects[1024];
 	Bitu num_joysticks;
 #if defined (WIN32)
@@ -401,7 +403,7 @@
 	}
 
 	//PXX
-	if ((i_flags&SDL_OPENGL) && !(flags&SDL_OPENGL) && height==i_height && width==i_width && height==480) {
+	if ((i_flags&SDL_OPENGL) && !(flags&SDL_OPENGL) && height==i_height && width==i_width /*&& height==480*/) {
 		height++;
 	}
 #endif //WIN32
@@ -620,6 +622,10 @@
 
 
 void GFX_ResetScreen(void) {
+	if(glide.enabled) {
+		GLIDE_ResetScreen(true);
+		return;
+	}
 	GFX_Stop();
 	if (sdl.draw.callback)
 		(sdl.draw.callback)( GFX_CallBackReset );
@@ -692,6 +698,17 @@
 		sdl.surface=SDL_SetVideoMode_Wrap(sdl.clip.w,sdl.clip.h,bpp,sdl_flags);
 	}
 
+        if (sdl.desktop.want_type == SCREEN_OPENGL) {
+            if (!sdl.dpiscale) {
+                int v[4];
+                glGetIntegerv(GL_VIEWPORT, v);
+                sdl.dpiscale = (100.f * v[2]) / sdl.clip.w;
+            }
+            float r = (sdl.desktop.fullscreen)? 1.f:(sdl.dpiscale / 100.f);
+            sdl.clip.w = (1.f * sdl.clip.w) * r;
+            sdl.clip.h = (1.f * sdl.clip.h) * r;
+        }
+
 	if (sdl.surface && sdl.surface->flags & SDL_FULLSCREEN) {
 		sdl.clip.x = (Sint16)((sdl.surface->w-sdl.clip.w)/2);
 		sdl.clip.y = (Sint16)((sdl.surface->h-sdl.clip.h)/2);
@@ -711,6 +728,10 @@
 		SDL_FreeSurface(sdl.blit.surface);
 		sdl.blit.surface=0;
 	}
+	if (sdl.desktop.type == SCREEN_OPENGL) {
+            glBindTexture(GL_TEXTURE_2D, 0);
+            glDisable(GL_TEXTURE_2D);
+        }
 }
 
 #if C_OPENGL
@@ -957,9 +978,9 @@
 #if C_OPENGL
 	case SCREEN_OPENGL:
 	{
-		if (sdl.opengl.pixel_buffer_object) {
+		if (sdl.opengl.pixel_buffer_object && sdl.opengl.buffer) {
 			glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_EXT, 0);
-			if (sdl.opengl.buffer) glDeleteBuffersARB(1, &sdl.opengl.buffer);
+			glDeleteBuffersARB(1, &sdl.opengl.buffer);
 		} else if (sdl.opengl.framebuf) {
 			free(sdl.opengl.framebuf);
 		}
@@ -1166,6 +1187,7 @@
 	}//CASE
 	if (retFlags)
 		GFX_Start();
+        sdl.draw.flags = retFlags;
 	if (!sdl.mouse.autoenable) SDL_ShowCursor(sdl.mouse.autolock?SDL_DISABLE:SDL_ENABLE);
 	return retFlags;
 }
@@ -1249,6 +1271,7 @@
 		sticky_keys(true); //restore sticky keys to default state in windowed mode.
 #endif
 	}
+	(glide.enabled)? GLIDE_ResetScreen():
 	GFX_ResetScreen();
 }
 
@@ -2036,6 +2059,9 @@
 bool GFX_IsFullscreen(void) {
 	return sdl.desktop.fullscreen;
 }
+bool GFX_IsOpenGL(void) {
+	return (sdl.desktop.type == SCREEN_OPENGL);
+}
 
 #if defined(MACOSX)
 #define DB_POLLSKIP 3
@@ -2184,7 +2210,7 @@
 			throw(0);
 			break;
 		case SDL_VIDEOEXPOSE:
-			if (sdl.draw.callback) sdl.draw.callback( GFX_CallBackRedraw );
+			if ((sdl.draw.callback) && (!glide.enabled)) sdl.draw.callback( GFX_CallBackRedraw );
 			break;
 #ifdef WIN32
 		case SDL_KEYDOWN:
@@ -2669,6 +2695,10 @@
 			if (strcmp(sdl_drv_name,"windib")==0) LOG_MSG("SDL_Init: Starting up with SDL windib video driver.\n          Try to update your video card and directx drivers!");
 		}
 #endif
+        SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, 8);
+	SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);
+        SDL_GL_SetAttribute(SDL_GL_BUFFER_SIZE, 32);
+	glide.fullscreen = &sdl.desktop.fullscreen;
 	sdl.num_joysticks=SDL_NumJoysticks();
 
 	/* Parse configuration files */
@@ -2800,3 +2830,12 @@
 	height = sdl.draw.height;
 	fullscreen = sdl.desktop.fullscreen;
 }
+
+Bitu VOODOO_ScaleWidth();
+Bitu GFX_ScaleWidth(float &r) {
+        Bitu gfx_w = VOODOO_ScaleWidth();
+        r = (sdl.desktop.fullscreen || !sdl.dpiscale)? 1.f:(sdl.dpiscale / 100.f);
+        gfx_w = (1.f * gfx_w) * r;
+        return (gfx_w)? gfx_w:sdl.clip.w;
+}
+
diff -ru ../dosbox-code-0/src/hardware/Makefile.am ./src/hardware/Makefile.am
--- ../dosbox-code-0/src/hardware/Makefile.am	2022-05-04 22:19:44.467936900 -0700
+++ src/hardware/Makefile.am	2022-05-04 16:46:18.091670900 -0700
@@ -2,14 +2,17 @@
 
 SUBDIRS = serialport mame
 
-EXTRA_DIST = opl.cpp opl.h adlib.h dbopl.h pci_devices.h
+EXTRA_DIST = opl.cpp opl.h adlib.h dbopl.h pci_devices.h \
+	     voodoo_data.h voodoo_def.h voodoo_emu.h voodoo_interface.h voodoo_opengl.h voodoo_types.h voodoo_vogl.h
 
 noinst_LIBRARIES = libhardware.a
 
 libhardware_a_SOURCES = adlib.cpp dma.cpp gameblaster.cpp hardware.cpp iohandler.cpp joystick.cpp keyboard.cpp \
+			glide.cpp \
                         memory.cpp mixer.cpp pcspeaker.cpp pci_bus.cpp pic.cpp sblaster.cpp tandy_sound.cpp timer.cpp \
 			vga.cpp vga_attr.cpp vga_crtc.cpp vga_dac.cpp vga_draw.cpp vga_gfx.cpp vga_other.cpp \
 			vga_memory.cpp vga_misc.cpp vga_seq.cpp vga_xga.cpp vga_s3.cpp vga_tseng.cpp vga_paradise.cpp \
+			voodoo.cpp voodoo_emu.cpp voodoo_interface.cpp voodoo_opengl.cpp voodoo_vogl.cpp \
 			cmos.cpp disney.cpp gus.cpp mpu401.cpp ipx.cpp ipxserver.cpp dbopl.cpp
 
 
diff -ru ../dosbox-code-0/src/hardware/memory.cpp ./src/hardware/memory.cpp
--- ../dosbox-code-0/src/hardware/memory.cpp	2022-05-04 22:19:44.295973800 -0700
+++ src/hardware/memory.cpp	2022-05-04 16:46:18.224258100 -0700
@@ -23,6 +23,8 @@
 #include "setup.h"
 #include "paging.h"
 #include "regs.h"
+#include "glidedef.h"
+#include "voodoo.h"
 
 #include <string.h>
 
@@ -140,6 +142,10 @@
 	} else if ((phys_page>=memory.lfb.start_page+0x01000000/4096) &&
 				(phys_page<memory.lfb.start_page+0x01000000/4096+16)) {
 		return memory.lfb.mmiohandler;
+	} else if (VOODOO_PCI_CheckLFBPage(phys_page)) {
+		return VOODOO_GetPageHandler();
+	} else if (glide.enabled && (phys_page>=(GLIDE_LFB>>12)) && (phys_page<(GLIDE_LFB>>12)+GLIDE_PAGES)) {
+		return (PageHandler*)glide.lfb_pagehandler;
 	}
 	return &illegal_page_handler;
 }
@@ -191,6 +197,24 @@
 	}
 }
 
+void MEM_BlockRead32(PhysPt pt,void * data,Bitu size) {
+	Bit32u * write=(Bit32u *) data;
+	size>>=2;
+	while (size--) {
+		*write++=mem_readd_inline(pt);
+		pt+=4;
+	}
+}
+
+void MEM_BlockWrite32(PhysPt pt,void * data,Bitu size) {
+	Bit32u * read=(Bit32u *) data;
+	size>>=2;
+	while (size--) {
+		mem_writed_inline(pt,*read++);
+		pt+=4;
+	}
+}
+
 void MEM_BlockCopy(PhysPt dest,PhysPt src,Bitu size) {
 	mem_memcpy(dest,src,size);
 }
diff -ru ../dosbox-code-0/src/hardware/pci_bus.cpp ./src/hardware/pci_bus.cpp
--- ../dosbox-code-0/src/hardware/pci_bus.cpp	2022-05-04 22:19:45.735577800 -0700
+++ src/hardware/pci_bus.cpp	2022-05-04 16:46:18.091670900 -0700
@@ -19,12 +19,15 @@
 
 #include "dosbox.h"
 #include "inout.h"
+#include "paging.h"
 #include "mem.h"
 #include "pci_bus.h"
 #include "setup.h"
 #include "debug.h"
 #include "callback.h"
 #include "regs.h"
+#include "../ints/int10.h"
+#include "voodoo.h"
 
 
 #if defined(PCI_FUNCTIONALITY_ENABLED)
@@ -418,6 +421,53 @@
 static PCI* pci_interface=NULL;
 
 
+void PCI_AddSVGAS3_Device(void) {
+	PCI_Device* svga_dev=new PCI_VGADevice();
+	if (pci_interface!=NULL) {
+		pci_interface->RegisterPCIDevice(svga_dev);
+	} else {
+		if (num_rqueued_devices<max_rqueued_devices)
+			rqueued_devices[num_rqueued_devices++]=svga_dev;
+	}
+}
+
+void PCI_RemoveSVGAS3_Device(void) {
+	if (pci_interface!=NULL) {
+		Bit16u vendor=PCI_VGADevice::VendorID();
+		Bit16u device=PCI_VGADevice::DeviceID();
+		pci_interface->RemoveDevice(vendor,device);
+	}
+}
+
+void PCI_AddSST_Device(Bitu type) {
+	Bitu ctype = 1;
+	switch (type) {
+		case 1:
+		case 2:
+			ctype = type;
+			break;
+		default:
+			LOG_MSG("PCI:SST: Invalid board type %x specified",type);
+			break;
+	}
+	PCI_Device* voodoo_dev=new PCI_SSTDevice(ctype);
+	if (pci_interface!=NULL) {
+		pci_interface->RegisterPCIDevice(voodoo_dev);
+	} else {
+		if (num_rqueued_devices<max_rqueued_devices)
+			rqueued_devices[num_rqueued_devices++]=voodoo_dev;
+	}
+}
+
+void PCI_RemoveSST_Device(void) {
+	if (pci_interface!=NULL) {
+		Bit16u vendor=PCI_SSTDevice::VendorID();
+		pci_interface->RemoveDevice(vendor,1);
+		pci_interface->RemoveDevice(vendor,2);
+	}
+}
+
+
 PhysPt PCI_GetPModeInterface(void) {
 	if (pci_interface) {
 		return pci_interface->GetPModeCallbackPointer();
@@ -441,4 +491,18 @@
 	sec->AddDestroyFunction(&PCI_ShutDown,false);
 }
 
+#else
+
+void PCI_AddSVGAS3_Device(void) {
+}
+
+void PCI_RemoveSVGAS3_Device(void) {
+}
+
+void PCI_AddSST_Device(Bitu type) {
+}
+
+void PCI_RemoveSST_Device(void) {
+}
+
 #endif
diff -ru ../dosbox-code-0/src/hardware/pci_devices.h ./src/hardware/pci_devices.h
--- ../dosbox-code-0/src/hardware/pci_devices.h	2022-05-04 22:19:44.311599500 -0700
+++ src/hardware/pci_devices.h	2022-05-04 16:46:18.107369400 -0700
@@ -16,3 +16,230 @@
  *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
  */
 
+
+class PCI_VGADevice:public PCI_Device {
+private:
+	static const Bit16u vendor=0x5333;		// S3
+	static const Bit16u device=0x8811;		// trio64
+//	static const Bit16u device=0x8810;		// trio32
+public:
+	PCI_VGADevice():PCI_Device(vendor,device) {
+	}
+
+	static Bit16u VendorID(void) { return vendor; }
+	static Bit16u DeviceID(void) { return device; }
+
+	Bits ParseReadRegister(Bit8u regnum) {
+		return regnum;
+	}
+
+	bool OverrideReadRegister(Bit8u regnum, Bit8u* rval, Bit8u* rval_mask) {
+		return false;
+	}
+
+	Bits ParseWriteRegister(Bit8u regnum,Bit8u value) {
+		if ((regnum>=0x18) && (regnum<0x28)) return -1;	// base addresses are read-only
+		if ((regnum>=0x30) && (regnum<0x34)) return -1;	// expansion rom addresses are read-only
+		switch (regnum) {
+			case 0x10:
+				return (pci_cfg_data[this->PCIId()][this->PCISubfunction()][0x10]&0x0f);
+			case 0x11:
+				return 0x00;
+			case 0x12:
+//				return (value&0xc0);	// -> 4mb addressable
+				return (value&0x00);	// -> 16mb addressable
+			case 0x13:
+				return value;
+			case 0x14:
+				return (pci_cfg_data[this->PCIId()][this->PCISubfunction()][0x10]&0x0f);
+			case 0x15:
+				return 0x00;
+			case 0x16:
+				return value;	// -> 64kb addressable
+			case 0x17:
+				return value;
+			default:
+				break;
+		}
+		return value;
+	}
+
+	bool InitializeRegisters(Bit8u registers[256]) {
+		// init (S3 graphics card)
+//		registers[0x08] = 0x44;	// revision ID (s3 trio64v+)
+		registers[0x08] = 0x00;	// revision ID
+		registers[0x09] = 0x00;	// interface
+		registers[0x0a] = 0x00;	// subclass type (vga compatible)
+//		registers[0x0a] = 0x01;	// subclass type (xga device)
+		registers[0x0b] = 0x03;	// class type (display controller)
+		registers[0x0c] = 0x00;	// cache line size
+		registers[0x0d] = 0x00;	// latency timer
+		registers[0x0e] = 0x00;	// header type (other)
+
+		// reset
+		registers[0x04] = 0x23;	// command register (vga palette snoop, ports enabled, memory space enabled)
+		registers[0x05] = 0x00;
+		registers[0x06] = 0x80;	// status register (medium timing, fast back-to-back)
+		registers[0x07] = 0x02;
+
+//		registers[0x3c] = 0x0b;	// irq line
+//		registers[0x3d] = 0x01;	// irq pin
+
+//		Bit32u gfx_address_space=(((Bit32u)S3_LFB_BASE)&0xfffffff0) | 0x08;	// memory space, within first 4GB, prefetchable
+		Bit32u gfx_address_space=(((Bit32u)S3_LFB_BASE)&0xfffffff0);	// memory space, within first 4GB
+		registers[0x10] = (Bit8u)(gfx_address_space&0xff);		// base addres 0
+		registers[0x11] = (Bit8u)((gfx_address_space>>8)&0xff);
+		registers[0x12] = (Bit8u)((gfx_address_space>>16)&0xff);
+		registers[0x13] = (Bit8u)((gfx_address_space>>24)&0xff);
+
+		Bit32u gfx_address_space_mmio=(((Bit32u)S3_LFB_BASE+0x1000000)&0xfffffff0);	// memory space, within first 4GB
+		registers[0x14] = (Bit8u)(gfx_address_space_mmio&0xff);		// base addres 0
+		registers[0x15] = (Bit8u)((gfx_address_space_mmio>>8)&0xff);
+		registers[0x16] = (Bit8u)((gfx_address_space_mmio>>16)&0xff);
+		registers[0x17] = (Bit8u)((gfx_address_space_mmio>>24)&0xff);
+
+		return true;
+	}
+};
+
+
+class PCI_SSTDevice:public PCI_Device {
+private:
+	static const Bit16u vendor=0x121a;	// 3dfx
+	Bit16u oscillator_ctr;
+	Bit16u pci_ctr;
+public:
+	PCI_SSTDevice(Bitu type):PCI_Device(vendor,(type==2)?0x0002:0x0001) {
+		oscillator_ctr=0;
+		pci_ctr=0;
+	}
+
+	static Bit16u VendorID(void) { return vendor; }
+
+	Bits ParseReadRegister(Bit8u regnum) {
+//		LOG_MSG("SST ParseReadRegister %x",regnum);
+		switch (regnum) {
+			case 0x4c:
+			case 0x4d:
+			case 0x4e:
+			case 0x4f:
+				LOG_MSG("SST ParseReadRegister STATUS %x",regnum);
+				break;
+			case 0x54:
+			case 0x55:
+			case 0x56:
+			case 0x57:
+				if (DeviceID() >= 2) return -1;
+				break;
+			default:
+				break;
+		}
+		return regnum;
+	}
+
+	bool OverrideReadRegister(Bit8u regnum, Bit8u* rval, Bit8u* rval_mask) {
+		switch (regnum) {
+			case 0x54:
+				if (DeviceID() >= 2) {
+					oscillator_ctr++;
+					pci_ctr--;
+					*rval=(oscillator_ctr | ((pci_ctr<<16) & 0x0fff0000)) & 0xff;
+					*rval_mask=0xff;
+					return true;
+				}
+				break;
+			case 0x55:
+				if (DeviceID() >= 2) {
+					*rval=((oscillator_ctr | ((pci_ctr<<16) & 0x0fff0000)) >> 8) & 0xff;
+					*rval_mask=0xff;
+					return true;
+				}
+				break;
+			case 0x56:
+				if (DeviceID() >= 2) {
+					*rval=((oscillator_ctr | ((pci_ctr<<16) & 0x0fff0000)) >> 16) & 0xff;
+					*rval_mask=0xff;
+					return true;
+				}
+				break;
+			case 0x57:
+				if (DeviceID() >= 2) {
+					*rval=((oscillator_ctr | ((pci_ctr<<16) & 0x0fff0000)) >> 24) & 0xff;
+					*rval_mask=0x0f;
+					return true;
+				}
+				break;
+			default:
+				break;
+		}
+		return false;
+	}
+
+	Bits ParseWriteRegister(Bit8u regnum,Bit8u value) {
+//		LOG_MSG("SST ParseWriteRegister %x:=%x",regnum,value);
+		if ((regnum>=0x14) && (regnum<0x28)) return -1;	// base addresses are read-only
+		if ((regnum>=0x30) && (regnum<0x34)) return -1;	// expansion rom addresses are read-only
+		switch (regnum) {
+			case 0x10:
+				return (pci_cfg_data[this->PCIId()][this->PCISubfunction()][0x10]&0x0f);
+			case 0x11:
+				return 0x00;
+			case 0x12:
+				return (value&0x00);	// -> 16mb addressable (whyever)
+			case 0x13:
+				VOODOO_PCI_SetLFB(value<<24);
+				return value;
+			case 0x40:
+				VOODOO_PCI_InitEnable(value&7);
+				break;
+			case 0x41:
+			case 0x42:
+			case 0x43:
+				return -1;
+			case 0xc0:
+				VOODOO_PCI_Enable(true);
+				return -1;
+			case 0xe0:
+				VOODOO_PCI_Enable(false);
+				return -1;
+			default:
+				break;
+		}
+		return value;
+	}
+
+	bool InitializeRegisters(Bit8u registers[256]) {
+		// init (3dfx voodoo)
+		registers[0x08] = 0x02;	// revision
+		registers[0x09] = 0x00;	// interface
+//		registers[0x0a] = 0x00;	// subclass code
+		registers[0x0a] = 0x00;	// subclass code (video/graphics controller)
+//		registers[0x0b] = 0x00;	// class code (generic)
+		registers[0x0b] = 0x04;	// class code (multimedia device)
+		registers[0x0e] = 0x00;	// header type (other)
+
+		// reset
+		registers[0x04] = 0x02;	// command register (memory space enabled)
+		registers[0x05] = 0x00;
+		registers[0x06] = 0x80;	// status register (fast back-to-back)
+		registers[0x07] = 0x00;
+
+		registers[0x3c] = 0xff;	// no irq
+
+		// memBaseAddr: size is 16MB
+		Bit32u address_space=(((Bit32u)VOODOO_INITIAL_LFB)&0xfffffff0) | 0x08;	// memory space, within first 4GB, prefetchable
+		registers[0x10] = (Bit8u)(address_space&0xff);		// base addres 0
+		registers[0x11] = (Bit8u)((address_space>>8)&0xff);
+		registers[0x12] = (Bit8u)((address_space>>16)&0xff);
+		registers[0x13] = (Bit8u)((address_space>>24)&0xff);
+
+		if (DeviceID() >= 2) {
+			registers[0x40] = 0x00;
+			registers[0x41] = 0x40;	// voodoo2 revision ID (rev4)
+			registers[0x42] = 0x01;
+			registers[0x43] = 0x00;
+		}
+
+		return true;
+	}
+};
diff -ru ../dosbox-code-0/src/hardware/vga_s3.cpp ./src/hardware/vga_s3.cpp
--- ../dosbox-code-0/src/hardware/vga_s3.cpp	2022-05-04 22:19:44.092939900 -0700
+++ src/hardware/vga_s3.cpp	2022-05-04 16:46:18.107369400 -0700
@@ -21,6 +21,7 @@
 #include "inout.h"
 #include "vga.h"
 #include "mem.h"
+#include "pci_bus.h"
 
 void SVGA_S3_WriteCRTC(Bitu reg,Bitu val,Bitu /*iolen*/) {
 	switch (reg) {
@@ -550,4 +551,6 @@
 		vga.vmemsize = 4096*1024;
 		vga.s3.reg_36 = 0x1a;		// 4mb fast page mode
 	}
+
+	PCI_AddSVGAS3_Device();
 }
