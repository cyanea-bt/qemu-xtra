diff -ru ../dosbox-code-0/src/dosbox.cpp src/dosbox.cpp
--- ../dosbox-code-0/src/dosbox.cpp
+++ src/dosbox.cpp
@@ -372,7 +372,7 @@
 	else if (mtype == "hercules") { machine = MCH_HERC; }
 	else if (mtype == "ega")      { machine = MCH_EGA; }
 //	else if (mtype == "vga")          { svgaCard = SVGA_S3Trio; }
-	else if (mtype == "svga_s3")       { svgaCard = SVGA_S3Trio; }
+	else if (mtype == "svga_s3")       { svgaCard = SVGA_S3Trio; vga.vmemsize = 4*1024*1024;}
 	else if (mtype == "vesa_nolfb")   { svgaCard = SVGA_S3Trio; int10.vesa_nolfb = true;}
 	else if (mtype == "vesa_oldvbe")   { svgaCard = SVGA_S3Trio; int10.vesa_oldvbe = true;}
 	else if (mtype == "svga_et4000")   { svgaCard = SVGA_TsengET4K; }
@@ -432,7 +432,7 @@
 	secprop->AddInitFunction(&MEM_Init);//done
 	secprop->AddInitFunction(&HARDWARE_Init);//done
 	Pint = secprop->Add_int("memsize", Property::Changeable::WhenIdle,16);
-	Pint->SetMinMax(1,63);
+	Pint->SetMinMax(1,383);
 	Pint->Set_help(
 		"Amount of memory DOSBox has in megabytes.\n"
 		"This value is best left at its default to avoid problems with some games,\n"
diff -ru ../dosbox-code-0/src/hardware/memory.cpp src/hardware/memory.cpp
--- ../dosbox-code-0/src/hardware/memory.cpp
+++ src/hardware/memory.cpp
@@ -30,7 +30,7 @@
 
 #define PAGES_IN_BLOCK	((1024*1024)/MEM_PAGE_SIZE)
 #define SAFE_MEMORY	32
-#define MAX_MEMORY	64
+#define MAX_MEMORY	384
 #define MAX_PAGE_ENTRIES (MAX_MEMORY*1024*1024/4096)
 #define LFB_PAGES	512
 #define MAX_LINKS	((MAX_MEMORY*1024/4)+4096)		//Hopefully enough
diff -ru ../dosbox-code-0/src/ints/bios.cpp src/ints/bios.cpp
--- ../dosbox-code-0/src/ints/bios.cpp
+++ src/ints/bios.cpp
@@ -990,6 +990,27 @@
 		LOG(LOG_BIOS,LOG_NORMAL)("INT15:Function %X called, bios mouse not supported",reg_ah);
 		CALLBACK_SCF(true);
 		break;
+	case 0xe8:
+		switch (reg_al) {
+		case 0x01: { /* E801: memory size */
+			    Bitu sz = MEM_TotalPages()*4;
+			    if (sz >= 1024) sz -= 1024;
+			    else sz = 0;
+			    reg_ax = reg_cx = (sz > 0x3C00) ? 0x3C00 : sz; /* extended memory between 1MB and 16MB in KBs */
+			    sz -= reg_ax;
+			    sz /= 64;	/* extended memory size from 16MB in 64KB blocks */
+			    if (sz > 65535) sz = 65535;
+			    reg_bx = reg_dx = sz;
+			    CALLBACK_SCF(false);
+			}
+			break;
+		default:
+			LOG(LOG_BIOS,LOG_ERROR)("INT15:Unknown call %4X",reg_ax);
+			reg_ah=0x86;
+			CALLBACK_SCF(true);
+		}
+		break;
+
 	default:
 	unhandled:
 		LOG(LOG_BIOS,LOG_ERROR)("INT15:Unknown call %4X",reg_ax);
